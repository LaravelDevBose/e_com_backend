<?php

namespace App\Models;

use App\Traits\ManipulateBy;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Str;

class Product extends Model
{
    use ManipulateBy;

    const ProductType=[
        'Simple'=>1,
        'Variation'=>2
    ];

    const ProductCondition = [
        'New Product'=>1,
        'Used Product'=>2,
        'Republish Product'=>3
    ];

    const WarrantyType=[
        1=>'International Manufacturer Warranty',
        2=>'Non-local warranty',
        3=>'Local seller warranty',
        4=>'No Warranty',
        5=>'International Seller Warranty',
    ];

    const DangersGoods =[
        1=>'Battery',
        2=>'Liquid',
        3=>'None',
        4=>'Flammable',
    ];

    const ProductStatus=[
        'Active'=>1,
        'Inactive'=>2,
        'Pending'=>3,
        'Review'=>4,
        'Out of Stock'=>5,
    ];

    protected $table = 'products';

    protected $primaryKey = 'product_id';

    protected $fillable =[
        'product_sku',
        'category_id',
        'brand_id',
        'product_name',
        'highlight',
        'description',
        'lang_product_name',
        'lang_highlight',
        'lang_description',
        'dangers_goods',
        'what_in_box',
        'package_weight',
        'package_length',
        'package_width',
        'package_height',
        'delivery_cost1',
        'delivery_cost2',
        'product_status',
        'warranty_type',
        'video_url',
        'thumb_id',
        'product_slug',
        'seller_id',
        'product_type',
        'product_qty',
        'product_price',
        'seller_sku',
        'product_condition',
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
    }

    /**
     * Get the route key for the model.
     *
     * @return string
     */
    public function getRouteKeyName()
    {
        return 'product_slug';
    }

    public function getProductNameAttribute()
    {
        if (app()->getLocale() == 'so'){
            if(!empty($this->attributes['lang_product_name'])){
                return ucfirst($this->attributes['lang_product_name']);
            }
            return ucfirst($this->attributes['product_name']);
        }else{
            return ucfirst($this->attributes['product_name']);
        }
    }

    public function getHighlightAttribute()
    {
        if (app()->getLocale() == 'so'){
            if(!empty($this->attributes['lang_highlight'])){
                return ucfirst($this->attributes['lang_highlight']);
            }
            return ucfirst($this->attributes['highlight']);
        }else{
            return ucfirst($this->attributes['highlight']);
        }
    }

    public function getDescriptionAttribute()
    {
        if (app()->getLocale() == 'so'){
            if(!empty($this->attributes['lang_description'])){
                return ucfirst($this->attributes['lang_description']);
            }
            return ucfirst($this->attributes['description']);
        }else{
            return ucfirst($this->attributes['description']);
        }
    }
    public function scopeNotDelete($query){
        return $query->where('product_status', '!=', config('app.delete'));
    }

    public function scopeIsActive($query){
        return $query->where('product_status', config('app.active'));
    }

    public function scopeInAdminReview($query){
        return $query->whereIn('product_status', [Product::ProductStatus['Pending'], Self::ProductStatus['Pending']]);
    }

    public function scopeIsOwner($query){
        return $query->where('seller_id', \auth()->user()->seller->seller_id);
    }

    public static function flipProductType()
    {
        return array_flip(self::ProductType);
    }

    public static function flipProductStatus()
    {
        return array_flip(self::ProductStatus);
    }

    public static function flipProductCondition()
    {
        return array_flip(self::ProductCondition);
    }

    public static function product_sku_generate(){
        $sku = '';
        for ($i=1; $i<=4; $i++){
            $sku.= Str::random(4);
            if($i != 4){
                $sku .= '-';
            }
        }

        return $sku;
    }

    public static function dangers_goods_data($data){
        $goods = [];
        if(!empty($data)){
            $list = explode(',', $data);
            if(!empty($list)){
                foreach ($list as $key=>$value){
                    if(!empty($value) && !empty(Self::DangersGoods[$value])){
                        array_push($goods, Self::DangersGoods[$value]);
                    }
                }
            }
        }
        return $goods;
    }

    public function scopeDateRangeWish($query,$request){
        if($request->date_range == 'today'){
            $today = Carbon::today()->format('Y-m-d');
            $query->whereDate('created_at', $today);
        }

        if($request->date_range == 'week'){
            $now = Carbon::now();
            $weekStartDate = $now->startOfWeek()->format('Y-m-d');
            $weekEndDate = $now->endOfWeek()->format('Y-m-d');
            $query->whereDate('created_at', '>=', $weekStartDate)->whereDate('created_at', $weekEndDate);
        }

        if($request->date_range == 'month'){
            $now = Carbon::now();
            $monthStartDate = $now->startOfMonth()->format('Y-m-d');
            $monthEndDate = $now->endOfMonth()->format('Y-m-d');
            $query->whereDate('created_at', '>=', $monthStartDate)->whereDate('created_at', $monthEndDate);

        }

        if($request->date_range == 'custom'){
            $query->whereDate('created_at', '>=', Carbon::parse($request->start_date)->format('Y-m-d'))
                ->whereDate('created_at','<=', Carbon::parse($request->end_date)->format('Y-m-d'));
        }

        return $query;
    }

    public function category(){
        return $this->belongsTo(Category::class, 'category_id', 'category_id');
    }

    public function brand(){
        return $this->belongsTo(Brand::class, 'brand_id', 'brand_id');
    }

    public function productDetails(){
        return $this->hasOne(ProductDetails::class, 'product_id', 'product_id');
    }

    public function variations(){
        return $this->hasMany(ProductVariation::class, 'product_id', 'product_id');
    }

    public function productImages(){
        return $this->hasMany(ProductImage::class, 'product_id', 'product_id');
    }

    public function singleVariation(){
        return $this->hasOne(ProductVariation::class, 'product_id', 'product_id');
    }

    public function thumbImage(){
        return $this->belongsTo(Attachment::class, 'thumb_id', 'attachment_id');
    }

    public function seller(){
        return $this->belongsTo(Seller::class, 'seller_id', 'seller_id');
    }

    public function orderItems(){
        return $this->hasMany(OrderItem::class, 'product_id', 'product_id');
    }

    public function sectionProduct()
    {
        return $this->hasMany(SectionProduct::class, 'product_id', 'product_id');
    }

    public function rating(){
        return $this->hasOne(Rating::class, 'product_id', 'product_id');
    }

    public function reviews()
    {
        return $this->hasMany(Review::class, 'product_id', 'product_id');
    }
}
